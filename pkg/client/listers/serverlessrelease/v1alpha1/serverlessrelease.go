/*
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/serverless-operator/serverless-operator/pkg/apis/serverlessrelease/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ServerlessReleaseLister helps list ServerlessReleases.
type ServerlessReleaseLister interface {
	// List lists all ServerlessReleases in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ServerlessRelease, err error)
	// ServerlessReleases returns an object that can list and get ServerlessReleases.
	ServerlessReleases(namespace string) ServerlessReleaseNamespaceLister
	ServerlessReleaseListerExpansion
}

// serverlessReleaseLister implements the ServerlessReleaseLister interface.
type serverlessReleaseLister struct {
	indexer cache.Indexer
}

// NewServerlessReleaseLister returns a new ServerlessReleaseLister.
func NewServerlessReleaseLister(indexer cache.Indexer) ServerlessReleaseLister {
	return &serverlessReleaseLister{indexer: indexer}
}

// List lists all ServerlessReleases in the indexer.
func (s *serverlessReleaseLister) List(selector labels.Selector) (ret []*v1alpha1.ServerlessRelease, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ServerlessRelease))
	})
	return ret, err
}

// ServerlessReleases returns an object that can list and get ServerlessReleases.
func (s *serverlessReleaseLister) ServerlessReleases(namespace string) ServerlessReleaseNamespaceLister {
	return serverlessReleaseNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ServerlessReleaseNamespaceLister helps list and get ServerlessReleases.
type ServerlessReleaseNamespaceLister interface {
	// List lists all ServerlessReleases in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.ServerlessRelease, err error)
	// Get retrieves the ServerlessRelease from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.ServerlessRelease, error)
	ServerlessReleaseNamespaceListerExpansion
}

// serverlessReleaseNamespaceLister implements the ServerlessReleaseNamespaceLister
// interface.
type serverlessReleaseNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ServerlessReleases in the indexer for a given namespace.
func (s serverlessReleaseNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ServerlessRelease, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ServerlessRelease))
	})
	return ret, err
}

// Get retrieves the ServerlessRelease from the indexer for a given namespace and name.
func (s serverlessReleaseNamespaceLister) Get(name string) (*v1alpha1.ServerlessRelease, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("serverlessrelease"), name)
	}
	return obj.(*v1alpha1.ServerlessRelease), nil
}
